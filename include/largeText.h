#ifndef LARRGETEXT
#define LARRGETEXT

#include <ncurses.h>
#include <string>
#include <vector>
#include "wrap.h"

std::pair<char, std::vector<std::vector<char>>> LTCharacters[66] = {
    {'A', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'B', {
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'C', {
        {' ', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', '#'}}
    },
    {'D', {
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'E', {
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', '#'}}
    },
    {'F', {
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '}}
    },
    {'G', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', '#'}}
    },
    {'H', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'I', {
        {'#', '#', '#', '#', '#'},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {'#', '#', '#', '#', '#'}}
    },
    {'J', {
        {' ', '#', '#', '#', '#'},
        {' ', ' ', ' ', '#', ' '},
        {' ', ' ', ' ', '#', ' '},
        {'#', ' ', ' ', '#', ' '},
        {' ', '#', '#', ' ', ' '}}
    },
    {'K', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', '#', ' '},
        {'#', '#', '#', ' ', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'L', {
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', '#'}}
    },
    {'M', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', ' ', '#', '#'},
        {'#', ' ', '#', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'N', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', ' ', ' ', '#'},
        {'#', ' ', '#', ' ', '#'},
        {'#', ' ', ' ', '#', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'O', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'P', {
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '}}
    },
    {'Q', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', '#', '#'},
        {' ', '#', '#', ' ', '#'}}
    },
    {'R', {
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'S', {
        {' ', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', ' '},
        {' ', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'T', {
        {'#', '#', '#', '#', '#'},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'U', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'V', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', ' ', '#', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'W', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', '#', ' ', '#'},
        {'#', '#', ' ', '#', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'X', {
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', ' ', '#', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', '#', ' ', '#', ' '},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'Y', {
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', ' ', '#', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'Z', {
        {'#', '#', '#', '#', '#'},
        {' ', ' ', ' ', '#', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', '#', ' ', ' ', ' '},
        {'#', '#', '#', '#', '#'}}
    },
    {'a', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', '#', '#', ' ', '#'}}
    },
    {'b', {
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'c', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', '#'}}
    },
    {'d', {
        {' ', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', '#'}}
    },
    {'e', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', '#'},
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', '#'}}
    },
    {'f', {
        {' ', ' ', ' ', '#', '#'},
        {' ', ' ', '#', ' ', ' '},
        {'#', '#', '#', '#', '#'},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'g', {
        {' ', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', '#'},
        {' ', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'h', {
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'i', {
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', '#', '#', '#', ' '}}
    },
    {'j', {
        {' ', ' ', ' ', '#', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', '#', ' '},
        {' ', '#', ' ', '#', ' '},
        {' ', ' ', '#', '#', ' '}}
    },
    {'k', {
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', '#', '#', ' ', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', ' ', ' ', '#', ' '}}
    },
    {'l', {
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', '#', ' '}}
    },
    {'m', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', '#', ' ', '#', ' '},
        {'#', ' ', '#', ' ', '#'},
        {'#', ' ', '#', ' ', '#'},
        {'#', ' ', '#', ' ', '#'}}
    },
    {'n', { 
        {' ', ' ', ' ', ' ', ' '},
        {'#', '#', '#', ' ', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', ' ', ' ', '#', ' '},
        {'#', ' ', ' ', '#', ' '}}
    },
    {'o', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'p', {
        {'#', ' ', '#', '#', ' '},
        {'#', '#', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '}}
    },
    {'q', {
        {' ', '#', '#', ' ', '#'},
        {'#', ' ', ' ', '#', '#'},
        {' ', '#', '#', '#', '#'},
        {' ', ' ', ' ', ' ', '#'},
        {' ', ' ', ' ', ' ', '#'}}
    },
    {'r', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', '#', '#', '#'},
        {' ', '#', ' ', ' ', ' '},
        {' ', '#', ' ', ' ', ' '},
        {' ', '#', ' ', ' ', ' '}}
    },
    {'s', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', '#', '#', '#', '#'},
        {'#', '#', ' ', ' ', ' '},
        {' ', ' ', ' ', '#', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'t', {
        {' ', ' ', '#', ' ', ' '},
        {'#', '#', '#', '#', '#'},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'u', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'v', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', ' ', '#', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'w', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {'#', ' ', '#', ' ', '#'},
        {'#', ' ', '#', ' ', '#'},
        {' ', '#', ' ', '#', ' '}}
    },
    {'x', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {' ', ' ', '#', ' ', ' '},
        {' ', '#', ' ', '#', ' '},
        {'#', ' ', ' ', ' ', '#'}}
    },
    {'y', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', '#'},
        {' ', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'z', {
        {' ', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', ' '},
        {' ', ' ', '#', ' ', ' '},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', ' '}}
    },
    {'0', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', '#', '#'},
        {'#', ' ', '#', ' ', '#'},
        {'#', '#', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'1', {
        {' ', ' ', '#', ' ', ' '},
        {'#', '#', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '},
        {'#', '#', '#', '#', '#'}}
    },
    {'2', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {' ', ' ', '#', ' ', ' '},
        {' ', '#', ' ', ' ', ' '},
        {'#', '#', '#', '#', '#'}}
    },
    {'3', {
        {'#', '#', '#', '#', ' '},
        {' ', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '},
        {' ', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', ' '}}
    },
    {'4', {
        {' ', ' ', '#', '#', ' '},
        {' ', '#', ' ', '#', ' '},
        {'#', '#', '#', '#', '#'},
        {' ', ' ', ' ', '#', ' '},
        {' ', ' ', ' ', '#', ' '}}
    },
    {'5', {
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', '#'},
        {' ', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', '#'}}
    },
    {'6', {
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', ' '},
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', '#'}}
    },
    {'7', {
        {'#', '#', '#', '#', '#'},
        {' ', ' ', ' ', ' ', '#'},
        {' ', ' ', ' ', '#', ' '},
        {' ', ' ', '#', ' ', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {'8', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {' ', '#', '#', '#', ' '}}
    },
    {'9', {
        {'#', '#', '#', '#', '#'},
        {'#', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', '#'},
        {' ', ' ', ' ', ' ', '#'},
        {'#', '#', '#', '#', '#'}}
    },
    {'.', {
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {'#', '#', '#', ' ', ' '}}
    },
    {'!', {
        {'#', '#', '#', ' ', ' '},
        {'#', '#', '#', ' ', ' '},
        {'#', '#', '#', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {'#', '#', '#', ' ', ' '}}
    },
    {'?', {
        {' ', '#', '#', '#', ' '},
        {'#', ' ', ' ', ' ', '#'},
        {' ', ' ', '#', '#', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', '#', ' ', ' '}}
    },
    {' ',{
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '},
        {' ', ' ', ' ', ' ', ' '}}
    }
};

// // Return lines of large text
// // rawInput = string to convert to large text
// // width = width of the space the large text can occupy (in characters)
// std::vector<std::vector<std::vector<char>>> generateLT(std::string rawInput, int width) {
//     std::vector<std::vector<std::vector<char>>> output;
    
//     // Apply a wrap to the input text
//     std::vector<std::string> processedInput = commonWrap(rawInput, width - (rawInput.length() * 5 + (rawInput.length() - 1) * 3));

//     for (int i = 0; i < processedInput.size(); i++) {
//         // Add a new line of 5x5 characters
//         output.emplace_back();

//         for (int j = 0; j < processedInput[i].length(); j++) {
//             for (int k = 0; k < 65; k++) {
//                 if (processedInput[i][j] == LTCharacters[k].first) {
//                     for (int l = 0; l < 5; l++) {
//                         for (int m = 0; m < 5; m++) {
//                             output[i][l][m] = LTCharacters[k].second[l][m];
//                         }
//                     }
//                     break;
//                 }
//             }
//         }
//     }

//     return output;
// }

void largeText(WINDOW *win, std::pair<int, int> origin, std::string rawInput, int color, bool bold = false) {
    wattron(win, COLOR_PAIR(color));

    if (bold) {
        wattron(win, A_BOLD);
    }

    for (int i = 0; i < rawInput.length(); i++) {
        for (int j = 0; j < 65; j++) {
            if (rawInput[i] == LTCharacters[j].first) {
                for (int k = 0; k < 5; k++) {
                    for (int l = 0; l < 5; l++) {
                        mvwaddch(win, origin.first + k, origin.second + l + i * 8, LTCharacters[j].second[k][l]);
                    }
                }
            }
        }
    }

    if (bold) {
        wattroff(win, A_BOLD);
    }

    wattroff(win, COLOR_PAIR(color));
}

#endif
